import axios from 'axios';

export interface Language {
  name: string;
  url: string;
}

export interface SubtitleTrack {
  baseUrl: string;
  languageCode: string;
  // sort of (isAutoGenerated ? 'a' : '') + '.' + languageCode
  vssId: string;
  name: {
    simpleText: string;
  };
  isTranslatable?: boolean;
  kind?: 'asr';
  rtl?: boolean;
}

async function getVideoInfo(videoId: string): Promise<string> {
  const url = `https://p3trukh1n.000webhostapp.com/youtube.php?id=${videoId}`;
  const { data } = await axios.get(url);
  if (!data || typeof data !== 'string')
    throw new Error('Empty or incorrect response');
  return data;
}

function parseSubtitleTracks(response: string): SubtitleTrack[] | null {
  const searchParams = new URLSearchParams(response);
  const playerResponseStr = searchParams.get('player_response');
  if (!playerResponseStr) throw new Error('Player response is empty');
  const playerResponse = JSON.parse(playerResponseStr);
  const captionTracks: SubtitleTrack[] | undefined =
    playerResponse?.captions?.playerCaptionsTracklistRenderer?.captionTracks;
  if (!captionTracks) return null;
  return captionTracks;
}

function convertSubtitleTracks(
  tracks: SubtitleTrack[],
  format: string = 'vtt'
): Language[] {
  return tracks.map((track) => {
    const name = track.name?.simpleText;
    const url = `${track?.baseUrl}&format=${format}`;
    return { name, url };
  });
}

export async function getLanguages(
  videoId: string,
  format: string = 'vtt'
): Promise<Language[] | null> {
  const videoInfo = await getVideoInfo(videoId);
  const tracks = parseSubtitleTracks(videoInfo);
  if (!tracks) return null;
  return convertSubtitleTracks(tracks, format);
}

export default getLanguages;
